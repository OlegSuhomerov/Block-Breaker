
local app = require('scripts.service.app')
local health_menager = require('scripts.modules.gui.health_menager')
local loader_scenes = require('scripts.modules.loader_scenes')
local list_scenes = require('scripts.start_modules.list_scenes')
local anim_button = require('scripts.modules.gui.anim_button')
local druid = require("druid.druid")

local camera = app.camera
local game_components = app.game_components
local config = app.config
local game_messages = app.game_messages
local gui_constants = app.gui_constants

local function heart_set_texture_and_settings(node)
	gui.set_texture(node, game_components.atlas_game_level)
	gui.play_flipbook(node, game_components.heart)
	gui.set_xanchor(node, gui_constants.anchor_right)
	gui.set_yanchor(node, gui_constants.anchor_top)
	gui.set_adjust_mode(node,gui_constants.adjust_mode_stretch)
end

local function check_absence_hp(self)
	for k in pairs(self.hearts_scene) do
		if self.hearts_scene[k] ~= nil then
			gui.delete_node(self.hearts_scene[k])
		end
	end
end

local function create_bonus_hearts(self)
	local pos_block_hp, indent_hp_x = health_menager.pos_start_spawn_hp(config)
	pos_block_hp.x = pos_block_hp.x - (config.size_hearts.x + indent_hp_x) * #self.hearts_scene
	local node = gui.new_box_node(pos_block_hp, config.size_hearts)
	heart_set_texture_and_settings(node)
	self.hearts_scene[#self.hearts_scene + 1] = node 
end

local function create_hearts(self)
	local pos_block_hp, indent_hp_x = health_menager.pos_start_spawn_hp(config)
	
	for i = 1, config.count_health do	
		local node = gui.new_box_node(pos_block_hp, config.size_hearts)
		pos_block_hp.x = pos_block_hp.x - config.size_hearts.x - indent_hp_x
		heart_set_texture_and_settings(node)
		self.hearts_scene[i] = node 
	end
end

local function edit_progress(progress, percent)
	local node = gui.get_node(game_components.text_progress_amount)
	local int_percent = math.ceil(percent)
	if int_percent >= 100 then
		int_percent = 100
	end
	local text_progress = int_percent .. "%"
	gui.set_text(node, text_progress)
	progress:to(percent / 100)
end

local function setup_progress(self)
	self.progress = self.druid:new_progress(game_components.progress_fill, game_components.x, config.start_value_progress)
end

local function set_img_chapter()
	local node = gui.get_node(game_components.img_chapter)
	gui.set_texture(node, game_components.atlas)
	gui.play_flipbook(node, config.data_chapter[config.select_chapter].img)
end

function init(self)
	self.druid = druid.new(self)
	msg.post(".", game_messages.acquire_input_focus)
	self.hearts_scene = {} 
	create_hearts(self)
	setup_progress(self)
	set_img_chapter()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == game_messages.ball_delete and self.hearts_scene[1] ~= nil then
		health_menager.minus_hp(self, false)

	elseif message_id == game_messages.black_heart and self.hearts_scene[1] ~= nil then
		health_menager.minus_hp(self, true)

	elseif message_id == game_messages.bonus_heart and #self.hearts_scene < config.count_health then
		create_bonus_hearts(self)
		
	elseif message_id == game_messages.respawn_hp then
		check_absence_hp(self)
		create_hearts(self)
		
	elseif message_id == game_messages.change_progress then
		edit_progress(self.progress, message.percent)

	elseif message_id == game_messages.set_img_chapter then
		set_img_chapter()
	end
end

function on_input(self, action_id, action)
	local node_pause = gui.get_node(game_components.bt_pause)
	anim_button.animation(game_components.bt_pause, self, action_id, action)
	if gui.pick_node(node_pause, action.x, action.y) and action.released then
		loader_scenes.show_scene(list_scenes.popup_pause)
	end
end


