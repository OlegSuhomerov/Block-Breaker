
local transitions = require "monarch.transitions.gui"
local monarch = require "monarch.monarch"
local app = require('scripts.service.app')
local loader_scenes = require('scripts.modules.loader_scenes')
local list_scenes = require('scripts.start_modules.list_scenes')
local anim_button = require('scripts.modules.gui.anim_button')
local restart = require('scripts.modules.restart')
local menager_count_blocks = require('scripts.modules.block.menager_count_blocks')
local druid = require("druid.druid")
local menager_energy = require('scripts.modules.menager_energy')

local game_components = app.game_components
local config = app.config
local game_messages = app.game_messages

local function transition_monarch(self)
	self.transition = transitions.create(gui.get_node(game_components.popup_loss))
	.show_in(transitions.slide_in_bottom, gui.EASING_OUTQUART, 1, 0)
	.show_out(transitions.slide_out_top, gui.EASING_INQUART, 0.3, 0.0)
	.back_in(transitions.slide_in_bottom, gui.EASING_INQUART, 0.5, 0.0)
	.back_out(transitions.slide_out_top, gui.EASING_INQUART, 0.5, 0.0)
end

local function showing_lvl_and_chapter()
	local node_lvl = gui.get_node(game_components.lvl_info)
	local node_chapter = gui.get_node(game_components.chapter_info)
	gui.set_text(node_lvl, config.select_lvl)
	gui.set_text(node_chapter, config.select_chapter)
end

local function setup_progress(self)
	local percent = menager_count_blocks.get_percent()
	local node = gui.get_node(game_components.text_progress_amount)
	local int_percent = math.ceil(percent)
	if int_percent >= 100 then
		int_percent = 100
	end
	local text_progress = int_percent .. "%"
	gui.set_text(node, text_progress)
	self.progress = self.druid:new_progress(game_components.progress_fill, game_components.x, percent / 100)
end

function init(self)
	transition_monarch(self)
	msg.post(game_components.balls, game_messages.stop_all_ball)
	msg.post(".", game_messages.acquire_input_focus)
	self.druid = druid.new(self)
	showing_lvl_and_chapter()
	setup_progress(self)
end

function on_message(self, message_id, message, sender)
	self.transition.handle(message_id, message, sender)
end

function on_input(self, action_id, action)
	local node_menu = gui.get_node(game_components.bt_menu)
	local node_restart = gui.get_node(game_components.bt_restart)
	local node_buy_energy = gui.get_node(game_components.bt_buy_energy)
	
	anim_button.animation(game_components.bt_menu, self, action_id, action)
	anim_button.animation(game_components.bt_restart, self, action_id, action)
	anim_button.animation(game_components.bt_buy_energy, self, action_id, action)

	if gui.pick_node(node_menu, action.x, action.y) and action.released then
		loader_scenes.show_scene(list_scenes.menu)
		
	elseif gui.pick_node(node_restart, action.x, action.y) and action.released and menager_energy.check_price_energy() then
		restart.restart_game()
		loader_scenes.hide_scene(list_scenes.popup_loss)
		
	elseif gui.pick_node(node_buy_energy, action.x, action.y) and action.released and menager_energy.check_price_energy() then
		menager_energy.take_energy()
		restart.respawn_ball_and_platform()
		msg.post(game_components.game_gui_scene, game_messages.bonus_heart)
		loader_scenes.hide_scene(list_scenes.popup_loss)
	end
end

